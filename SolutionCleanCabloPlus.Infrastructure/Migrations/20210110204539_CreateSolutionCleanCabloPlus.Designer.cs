// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolutionCleanCabloPlus.Infrastructure;

namespace SolutionCleanCabloPlus.Infrastructure.Migrations
{
    [DbContext(typeof(SolutionCleanCabloPlusContext))]
    [Migration("20210110204539_CreateSolutionCleanCabloPlus")]
    partial class CreateSolutionCleanCabloPlus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("CompteServiceDiffusion", b =>
                {
                    b.Property<int>("comptesId")
                        .HasColumnType("int");

                    b.Property<int>("serviceDiffusionsId")
                        .HasColumnType("int");

                    b.HasKey("comptesId", "serviceDiffusionsId");

                    b.HasIndex("serviceDiffusionsId");

                    b.ToTable("CompteServiceDiffusion");
                });

            modelBuilder.Entity("EquipementFacture", b =>
                {
                    b.Property<int>("equipementsId")
                        .HasColumnType("int");

                    b.Property<int>("facturesId")
                        .HasColumnType("int");

                    b.HasKey("equipementsId", "facturesId");

                    b.HasIndex("facturesId");

                    b.ToTable("EquipementFacture");
                });

            modelBuilder.Entity("FactureFilm", b =>
                {
                    b.Property<int>("facturesId")
                        .HasColumnType("int");

                    b.Property<int>("filmsId")
                        .HasColumnType("int");

                    b.HasKey("facturesId", "filmsId");

                    b.HasIndex("filmsId");

                    b.ToTable("FactureFilm");
                });

            modelBuilder.Entity("FactureServiceDiffusion", b =>
                {
                    b.Property<int>("facturesId")
                        .HasColumnType("int");

                    b.Property<int>("serviceDiffusionsId")
                        .HasColumnType("int");

                    b.HasKey("facturesId", "serviceDiffusionsId");

                    b.HasIndex("serviceDiffusionsId");

                    b.ToTable("FactureServiceDiffusion");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Branchement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("compteId")
                        .HasColumnType("int");

                    b.Property<int>("installationId")
                        .HasColumnType("int");

                    b.Property<string>("localisation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("compteId");

                    b.HasIndex("installationId");

                    b.ToTable("Branchements");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("territoireId")
                        .HasColumnType("int");

                    b.Property<string>("téléphone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("territoireId");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Client");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Compte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateCréation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("employéRCId")
                        .HasColumnType("int");

                    b.Property<int>("modeFacturation")
                        .HasColumnType("int");

                    b.Property<decimal>("solde")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.HasIndex("employéRCId");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Employé", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fonction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mdp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prénom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("salaire")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("territoireId")
                        .HasColumnType("int");

                    b.Property<string>("téléphone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("territoireId")
                        .IsUnique()
                        .HasFilter("[territoireId] IS NOT NULL");

                    b.ToTable("Employés");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Employé");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Equipement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("compteId")
                        .HasColumnType("int");

                    b.Property<string>("nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("tarifMensuelLocation")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("compteId");

                    b.ToTable("Equipements");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.EstDesserviDans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("serviceDiffusionId")
                        .HasColumnType("int");

                    b.Property<decimal>("tarif")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("territoireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("serviceDiffusionId");

                    b.HasIndex("territoireId");

                    b.ToTable("EstDesserviDans");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("compteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("montantEquipements")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("montantFilms")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("montantInstallation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("montantServicesDiffusion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("paiementId")
                        .HasColumnType("int");

                    b.Property<bool>("payée")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("compteId");

                    b.HasIndex("paiementId")
                        .IsUnique()
                        .HasFilter("[paiementId] IS NOT NULL");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("montantLocation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("titre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Installation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("compteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateProgramation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateRéalisation")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("frais")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("technicienId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("compteId");

                    b.HasIndex("technicienId");

                    b.ToTable("Installations");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.LoueFilm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("compteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("filmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("compteId");

                    b.HasIndex("filmId");

                    b.ToTable("LoueFilms");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Paiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("compteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("montant")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("compteId");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.ServiceDiffusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceDiffusions");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Territoire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Territoires");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.ClientEntreprise", b =>
                {
                    b.HasBaseType("SolutionCleanCabloPlus.Core.Client");

                    b.Property<string>("raisonSociale")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ClientEntreprise");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.ClientPersonne", b =>
                {
                    b.HasBaseType("SolutionCleanCabloPlus.Core.Client");

                    b.Property<string>("nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prénom")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ClientPersonne");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.EmployéRC", b =>
                {
                    b.HasBaseType("SolutionCleanCabloPlus.Core.Employé");

                    b.HasDiscriminator().HasValue("EmployéRC");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Technicien", b =>
                {
                    b.HasBaseType("SolutionCleanCabloPlus.Core.Employé");

                    b.HasDiscriminator().HasValue("Technicien");
                });

            modelBuilder.Entity("CompteServiceDiffusion", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Compte", null)
                        .WithMany()
                        .HasForeignKey("comptesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SolutionCleanCabloPlus.Core.ServiceDiffusion", null)
                        .WithMany()
                        .HasForeignKey("serviceDiffusionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipementFacture", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Equipement", null)
                        .WithMany()
                        .HasForeignKey("equipementsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SolutionCleanCabloPlus.Core.Facture", null)
                        .WithMany()
                        .HasForeignKey("facturesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FactureFilm", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Facture", null)
                        .WithMany()
                        .HasForeignKey("facturesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SolutionCleanCabloPlus.Core.Film", null)
                        .WithMany()
                        .HasForeignKey("filmsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FactureServiceDiffusion", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Facture", null)
                        .WithMany()
                        .HasForeignKey("facturesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SolutionCleanCabloPlus.Core.ServiceDiffusion", null)
                        .WithMany()
                        .HasForeignKey("serviceDiffusionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Branchement", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Compte", "compte")
                        .WithMany()
                        .HasForeignKey("compteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SolutionCleanCabloPlus.Core.Installation", "installation")
                        .WithMany()
                        .HasForeignKey("installationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("compte");

                    b.Navigation("installation");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Client", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Territoire", "territoire")
                        .WithMany("clients")
                        .HasForeignKey("territoireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("territoire");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Compte", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Client", "client")
                        .WithMany("comptes")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SolutionCleanCabloPlus.Core.EmployéRC", "employéRC")
                        .WithMany()
                        .HasForeignKey("employéRCId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("client");

                    b.Navigation("employéRC");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Employé", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Territoire", "territoire")
                        .WithOne("employé")
                        .HasForeignKey("SolutionCleanCabloPlus.Core.Employé", "territoireId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("territoire");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Equipement", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Compte", "compte")
                        .WithMany("equipements")
                        .HasForeignKey("compteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("compte");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.EstDesserviDans", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.ServiceDiffusion", "serviceDiffusion")
                        .WithMany("estDesserviDans")
                        .HasForeignKey("serviceDiffusionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SolutionCleanCabloPlus.Core.Territoire", "territoire")
                        .WithMany()
                        .HasForeignKey("territoireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("serviceDiffusion");

                    b.Navigation("territoire");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Facture", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Compte", "compte")
                        .WithMany()
                        .HasForeignKey("compteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SolutionCleanCabloPlus.Core.Paiement", "paiement")
                        .WithOne("facture")
                        .HasForeignKey("SolutionCleanCabloPlus.Core.Facture", "paiementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("compte");

                    b.Navigation("paiement");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Installation", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Compte", "compte")
                        .WithMany("installations")
                        .HasForeignKey("compteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SolutionCleanCabloPlus.Core.Employé", "technicien")
                        .WithMany()
                        .HasForeignKey("technicienId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("compte");

                    b.Navigation("technicien");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.LoueFilm", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Compte", "compte")
                        .WithMany()
                        .HasForeignKey("compteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SolutionCleanCabloPlus.Core.Film", "film")
                        .WithMany("loues")
                        .HasForeignKey("filmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("compte");

                    b.Navigation("film");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Paiement", b =>
                {
                    b.HasOne("SolutionCleanCabloPlus.Core.Compte", "compte")
                        .WithMany()
                        .HasForeignKey("compteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("compte");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Client", b =>
                {
                    b.Navigation("comptes");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Compte", b =>
                {
                    b.Navigation("equipements");

                    b.Navigation("installations");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Film", b =>
                {
                    b.Navigation("loues");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Paiement", b =>
                {
                    b.Navigation("facture");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.ServiceDiffusion", b =>
                {
                    b.Navigation("estDesserviDans");
                });

            modelBuilder.Entity("SolutionCleanCabloPlus.Core.Territoire", b =>
                {
                    b.Navigation("clients");

                    b.Navigation("employé");
                });
#pragma warning restore 612, 618
        }
    }
}
